package main

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"strings"

	"github.com/PuerkitoBio/goquery"
)

func main() {
	if len(os.Args) != 2 {
		fmt.Println("Give all the required arguments!")
		os.Exit(1)
	}

	targetURL := os.Args[1]
	crawlAndScan(targetURL)
}

func crawlAndScan(url string) {
	visited := make(map[string]bool)
	queue := []string{url}
	vulnerabilityFound := false

	for len(queue) > 0 && !vulnerabilityFound {
		currentURL := queue[0]
		queue = queue[1:]

		if visited[currentURL] {
			continue
		}

		visited[currentURL] = true

		fmt.Println("Scanning:", currentURL)
		analyzeResponse(currentURL, &vulnerabilityFound)

		links := discoverLinks(currentURL)
		for _, link := range links {
			if !visited[link] {
				queue = append(queue, link)
			}
		}
	}
}

func analyzeResponse(url string, vulnerabilityFound *bool) {
	resp, err := http.Get(url)
	if err != nil {
		log.Println("Error fetching URL:", err)
		return
	}
	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Println("Error reading response body:", err)
		return
	}

	if containsString(body, "<script>") {
		reportVulnerability(url, "Potential XSS vulnerability")
		*vulnerabilityFound = true
	}
}

func discoverLinks(url string) []string {
	resp, err := http.Get(url)
	if err != nil {
		log.Println("Error fetching URL:", err)
		return nil
	}
	defer resp.Body.Close()

	doc, err := goquery.NewDocumentFromReader(resp.Body)
	if err != nil {
		log.Println("Error parsing response:", err)
		return nil
	}

	var links []string
	doc.Find("a").Each(func(i int, s *goquery.Selection) {
		link, _ := s.Attr("href")
		if strings.HasPrefix(link, "http") {
			links = append(links, link)
		} else if strings.HasPrefix(link, "/") {
			links = append(links, url+link)
		}
	})

	return links
}

func reportVulnerability(url, vulnerability string) {
	fmt.Printf("Vulnerability detected at %s: %s\n", url, vulnerability)
	// You can log the vulnerability or save it to a report file
}

func containsString(data []byte, target string) bool {
	return bytes.Contains(data, []byte(target))
}
